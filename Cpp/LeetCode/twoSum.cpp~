#include <vector>
#include <iostream>
#include <cstdio>
#include <map>

using namespace std;

class Solution
{
public:

	/* Sample of map
		std::map<char,int> mymap;
		mymap.insert ( std::pair<char,int>('a',100) );
		mymap.at("a") = 10;

		for(auto& x: mymap){
			std::cout<< x.first << ": "<< x.second << std::endl;		
		}
	*/	

	//bruto force - complexity of O(n^2)
	vector<int> twoSum_sol_1(vector<int> &nums, int target){
		int n = nums.size();
		for(int i = 0; i<n;++i){
			for (int j = i+1; i < n; ++j)
			{
				if((nums[i]+nums[j])==target){
					vector <int> v;
					v.push_back(i);
					v.push_back(j);
					return v;
				}
			}
		}
	}

	vector<int> twoSum_sol_2(vector<int> &nums, int target)
	{
		std::map<int,int> hashTable;
		for(int i = 0; i < nums.size(); ++i)
		{
			if(hashTable.count(target - nums[i])!=0){
				std::cout<<"Achado "<<target - nums[i]<<" "<<hashTable[target - nums[i]]<<" "<< i <<std::endl;
				std::vector <int> res; //{hashTable.at(nums[i]), hashTable.at(target - nums[i])};
				res.push_back(hashTable.at(target - nums[i]));
				res.push_back(i);
				std::cout<< "found" << std::endl;				
				return res;			
			}
			if(hashTable[nums[i]] == 0){
				hashTable.insert(std::pair<int,int>(nums[i],i));					
				std::cout<<"Not Achado "<< nums[i]<<" "<< i << " "<<hashTable[nums[i]]<<std::endl;
				//std::cout<<hashTable[nums[i]]<<std::endl;
				//hashTable.insert(std::pair<int,int>(nums[i],i));
							
			}		
		}
	}
	Solution(){
		std::cout<<"Criado"<<std::endl;	
	};
	
	
};

int main(){
	//int arr[5] = [2,7,11,15];
	//vector<int> v (2,4,3,7,10);
	vector<int> v;
	v.push_back(3);
	v.push_back(2);
	v.push_back(4);
//	v.push_back(15);
	Solution s;
	vector<int> res = s.twoSum_sol_2(v, 6);
	for(vector<int>::iterator it = res.begin(); it!=res.end(); ++it)
	{
		std::cout<<*it<<std::endl;
	}
	return 0;
}
